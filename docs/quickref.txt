TADV 1.1
ADVENTURE {
  TITLE Adventure title
  AUTHOR Author
  INTRO Intro message text
  [INTRO additional lines allowed...]
  MAXWEIGHT weight
  MAXITEMS count
  FLAG flag_name [=TRUE|FALSE]
  VAR  var_name [=value]
  SVAR var_name [=value]
  EQUATE name value
  STARTINGROOM room_name
  TRACING
  [START {
    action_steps
    ...
    } ]
  ACTION {
    action_steps
    ...
    }
  }
FUNCTION name {
  action_steps
  ...
  }
ROOM [number] {
  NAME room_name
  IDENTIFIER room_identifier
  SHORT short description
  DESC description of room
  [DESC additional description lines...]
  [DESC {
    action_steps...
    }]
  [NORTH room_name [DOOR door_name]]
  [SOUTH room_name [DOOR door_name]]
  [EAST  room_name [DOOR door_name]]
  [WEST  room_name [DOOR door_name]]
  [NORTHEAST room_name [DOOR door_name]]
  [NORTHWEST room_name [DOOR door_name]]
  [SOUTHEAST room_name [DOOR door_name]]
  [SOUTHWEST room_name [DOOR door_name]]
  [UP    (room_name]
  [DOWN  (room_name]
  [NEEDLIGHT]
  [VISITED]
  [ACTION action phrase {
    action_steps...
    }]
  [ENTER {
    action_steps...
    }]
  [LEAVE {
    action_steps...
    }]
  [OCCUPIED {
    action_steps...
    }]
  [TURN {
    action_steps...
    }]
  }

DOOR [number] {
  NAME door_name
  IDENTIFIER door_identifier
  desc descriptive text
  desc {
    action_steps...
    }
  [OPEN]
  [CLOSED]
  [LOCKED]
  [UNLOCKED]
  [LOCKABLE]
  [KEY item_name]
  }

ITEM [number] {
  NAME item_name                        - Name for input parser
  IDENTIFIER item_identifier            - single word identifier for actions
  DESC description
  EXAMINE examine text
  [DESC {
    action_steps...
    }]
  [EXAMINE {
    action_steps...
    }]
  [WEIGHT weight]
  [SCORE  score]
  [NONCARRYABLE]
  [WEARABLE]
  [BEINGWORN]
  [STARTINGITEM]
  [CURSED]
  [CONTAINER]
  [MAXCONTENTS max]
  [LOCATION starting_room_number_or_name]
  [ACQUIRED {
    action_steps...
    }]
  [LOST {
    action_steps...
    }]
  [CARRYING {
    action_steps...
    }]
  [TURN {
    action_steps...
    }]
  [WORN {
    action_steps...
    }]
  [WEARING {
    action_steps...
    }]
  [REMOVED {
    action_steps...
    }]
  [ACTION action_word {
    action_steps...
    }]
  }

MESSAGE number {
  message text
  [additional message lines allowed]
  }

ACTION phrase {
  action_steps ...
  [action_steps ...]
  }

Action Steps:
[var val]  !              []        Set variable to value
[var]      @              [val]     Get value of a variable
[var]      @.             []        Print value of variable
[var val]  @=             [boolean] True if variable equals value
[var]      @++            []        Increment value of variable
[var]      @--            []        Decrement value of variable
[var val]  @+=            []        Add value to variable
[var val]  @-=            []        Subtract value to variable
[a b]      =              [boolean] True if a == b
[a b]      <>             [boolean] True if a != b
[a b]      >              [boolean] True if a > b
[a b]      <              [boolean] True if a < b
[a b]      >=             [boolean] True if a >= b
[a b]      <=             [boolean] True if a <= b
[a b]      +              [n]       Add top two stack entries
[n]        ++             [n]       Increment top of stack
[a b]      -              [n]       Subtract top two stack entries
[n]        --             [n]       Decrement top of stack
[a b]      *              [n]       Multiply top two stack entries
[a b]      /              [n]       Divide top two stack entries
[a b]      <<             [n]       Shift a left b bits
[a b]      >>             [n]       Shift a right b bits
[a b]      &              [n]       Logical AND
[a b]      |              [n]       Logical OR
[a b]      ^              [n]       Logical XOR
[n]        ~              [n]       Logical NOT
[]         .              []        Print top of stack, no CR, space before and after
[]         ?              [n]       Request numeric input from user
[]         "text"         []        Print the text between the quotes
[n]        abs            [n]       Absolute value
[num]      addscore       []        Add to player score
[a b]      and            [n]       Boolean and
[n]        aug            [n]       Augment top of stack
[]         begin          []        Beginning of BEGIN/UNTIL loop
[item]     bless          []        Remove cursed from an item
[item]     carrying?      [boolean] True if player is carrying item
[n]        chs            [n]       Change sign of top of stack
[...]      clear          []        Clear all items from stack
[n]        close          []        Close a door
[n]        closedoor      []        Close specified door
[item]     container?     [boolean] True if the item is a container
[c i]      contains?      [boolean] True if container c contains item i
[item]     contents       [... n]   Put container contents on stack
[]         count          [n]       Count of items on stack
[]         cr             []        Print a carriage return
[]         currentroom    [room]    Place current room on the stack
[item]     curse          []        Place curse on item
[item]     cursed?        [boolean] True if the item is cursed
[n]        dec            [n]       Decrement top of stack
[n]        describeitem   []        Display describe text for specified item
[]         die            []        End adventrue with player's death
[n]        dim            [n]       Diminish top of stack
[e s]      do             []        Begin a do loop
[n]        doorclosed?    [boolean] True if specifed door is closed
[n]        doorlocked?    [boolean] True if specified door is locked
[a]        drop           []        Drop top stack entry
[item]     dropitem       []        Drop specified item from player inventory
[n... n]   dropuntil      []        Drop items until TOS encountered again
[a]        dup            [a a]     Duplicate top of stack
[a b]      dup2           [a b a b] Duplicate top two stack values
[a]        dup?           [a a]     Duplicate top of stack if non-zero
[]         else           []        Continuation on failed boolean
[n]        emit           []        Output top of stack as ASCII character
[room]     enteredfrom?   [boolean] True if entered from specified room
[n]        examineitem    []        Display examine text for specified item
[item]     extractitem    []        Remove item from whereever it is
[]         false          []        Stop processing, perform default actions
[flag]     flagreset?     [boolean] True if specified flag is not set
[flag]     flagset?       [boolean] True if specified flag is set
[var]      get            [val]     Get value of a variable
[]         getdown        [room]    Room down of current room
[]         geteast        [room]    Room east of current room
[]         getwest        [room]    Room west of current room
[]         getnorth       [room]    Room north of current room
[]         getsouth       [room]    Room south of current room
[]         getup          [room]    Room up of current room
[]         goingdown?     [boolean] True if last command was down
[]         goingeast?     [boolean] True if last command was east
[]         goingnorth?    [boolean] True if last command was north
[]         goingsouth?    [boolean] True if last command was south
[]         goingup?       [boolean] True if last command was up
[]         goingwest?     [boolean] True if last command was west
[]         health         [n]       Return players current health
[n]        health+        []        Add to players health
[n]        health-        []        Subtract from players health
[n]        health=        []        Set players health
[]         i              [n]       Get current do value
[n]        inc            [n]       Increment top of stack
[room]     inroom?        [boolean] True if player in specified room
[]         invcount       [n]       Count of items being carried
[]         inventory      [... n]   Push players inventory onto stack
[n]        invitem        [n]       Get item number at specified inventory slot
[]         itemcount      [n]       Count of items in the game
[item]     iteminroom?    [boolean] True if specified item in current room
[item]     itemnotinroom? [boolean] True if specified item not in current room
[n]        light          []        Light for n turns, 0 turns off, -perm.
[]         light?         [boolean] Whether or not the player has light
[room rd]  linkdown       []        Link room's down exit to room rd
[room rd]  linkeast       []        Link room's east exit to room rd
[room rd]  linkne         []        Link room's north east exit to room rd
[room rd]  linknorth      []        Link room's north exit to room rd
[room rd]  linknw         []        Link room's north west exit to room rd
[room rd]  linkse         []        Link room's south east exit to room rd
[room rd]  linksouth      []        Link room's south exit to room rd
[room rd]  linksw         []        Link room's south west exit to room rd
[room rd]  linkwest       []        Link room's west exit to room rd
[room rd]  linkup         []        Link room's up exit to room rd
[item]     location       [room]    Room where object is located, or -1
[n]        lock           []        Lock a door
[n]        lockdoor       []        Lock specified door
[]         loop           []        End of do loop
[]         lose           []        End adventure with player having lost
[a b]      max            [n]       Return higher value of a or b
[a b]      min            [n]       Return lower value of a or b
[]         more           []        Prints -More- and then waits for <enter>
[n]        n.             []        Pop n items from stack and display them
[n]        ndrop          []        Drop n items from the stack
[a b]      nip            [b]       Drop second on stack
[... n]    nmax           [n]       Return maximum of specified set
[... n]    nmin           [n]       Return minimum of specified set
[a]        not            [n]       Boolean not
[item]     notcarrying?   [boolean] True if player is not carrying item
[room]     notinroom?     [boolean] True if player not in specified room
[msg]      nsay           []        Say message number without a carriage return
[n]        open           []        Open a door
[n]        opendoor       []        Open specified door
[n]        opened?        [boolean] True if door is opened
[a b]      or             [n]       Boolean or
[a b]      over           [a b a]   Copy 2nd stack item to top
[n]        pick           [n]       Copy nth stack item to top
[item]     placeitem      []        Place specified item in current room
[c i]      putinto        []        Put item i into container c
[num]      random         [val]     Generate a random number from 0-num
[item]     removeitem     []        Remove item from current room
[]         repeat         []        End of WHILE/REPEAT loop
[flag]     resetflag      []        Reset specified flag
[]         roomdesc       []        Print room long description
[a b c]    rot            [b c a]   Rotate 3rd item to top
[a b c]    -rot           [c a b]   Rotate top to 3rd
[svar]     s.             []        Print contents of specified svar
[svar]     s?             []        Accept user input into specified svar
[sd ss]    s+             []        Copy source string to end of destination
[svar]     s@             [az]      Retrieve string variable onto stack
[az svar]  s!             []        Store string into string variable
[sa sb]    s=             [boolean] True if both strings are equal
[sa sb]    s<>            [boolean] True if both strings are not equal
[sa sb]    s>             [boolean] True if string a greater than b
[sa sb]    s>=            [boolean] True if string a greater/equal to b
[sa sb]    s<             [boolean] True if string a less than b
[sa sb]    s<=            [boolean] True if string a less/equal to b
[]         score          [value]   Place the current score onto the stack
[svar]     sclear         []        Clear specified string variable
[var val]  set            []        Set variable to value
[msg]      say            []        Display specified message
[sd ss]    scopy          []        Copy source string into destinaion
[flag]     setflag        []        Set specified flag
[svar]     sget           [az]      Retrieve string variable onto stack
[sd sa]    slc            []        Convert sa to lowercase and place into sd
[sd ss n]  sleft          []        Copy left n characters of ss into sd
[svar]     slen           [n]       Length of specified svar
[n]        sgn            [n]       Return sign of number
[]         space          []        Print a single space
[n]        spaces         []        Output n spaces
[sd ss n]  sright         []        Copy right n characters of ss into sd
[az svar]  sset           []        Store string into string variable
[svar n]   sstr           []        Convert binay number to string
[...]      stack          [...]     Show contents of stack
[sd sa]    strim          []        Trim sa and place into sd
[num]      subscore       []        Subtract from player score
[sd sa]    suc            []        Convert sa to uppercase and place into sd
[... n]    sum            [n]       Sum top n items
[svar]     sval           [n]       Convert string number to binary
[a b]      swap           [b a]     Swap top 2 stack entries     
[a b c d]  swap2          [c d a b] Swap two 2 values with the 2 values below
[c i]      takefrom       []        Take item i out of container c
[item]     takeitem       []        Place specified item into player inventory
[room]     teleport       []        Teleport player to specified room
[]         troff          []        Turn off command tracing
[]         tron           []        Turn on command tracing
[]         true           []        Stop processing, prevent default actions
[a b]      tuck           [b a b]   Copy top of stack to third on stack
[]         turncount      [n]       Place the number of turns onto the stack
[n]        unlock         []        Unlock a door
[n]        unlockdoor     []        Unlock specified door
[n]        unlocked?      [boolean] True if door is unlocked
[boolean]  until          []        End of BEGIN/UNTIL loop
[n]        wearable?      [boolean] True if specified item is wearable
[n]        wearing?       [boolean] True if specified item is being worn
[]         weight         [value]   Get weight player is carrying
[boolean]  while          []        Beginning of WHILE/REPEAT loop
[]         win            []        End adventure with player having won
[a b]      xor            [n]       Boolean xor


